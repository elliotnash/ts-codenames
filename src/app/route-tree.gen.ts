/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as HowToPlayImport } from './routes/how-to-play';
import { Route as DashboardImport } from './routes/dashboard';
import { Route as CreateImport } from './routes/create';
import { Route as IndexImport } from './routes/index';
import { Route as GameIdImport } from './routes/game/$id';
import { Route as authRegisterImport } from './routes/(auth)/register';
import { Route as authLoginImport } from './routes/(auth)/login';

// Create/Update Routes

const HowToPlayRoute = HowToPlayImport.update({
  id: '/how-to-play',
  path: '/how-to-play',
  getParentRoute: () => rootRoute,
} as any);

const DashboardRoute = DashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any);

const CreateRoute = CreateImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const GameIdRoute = GameIdImport.update({
  id: '/game/$id',
  path: '/game/$id',
  getParentRoute: () => rootRoute,
} as any);

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any);

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/create': {
      id: '/create';
      path: '/create';
      fullPath: '/create';
      preLoaderRoute: typeof CreateImport;
      parentRoute: typeof rootRoute;
    };
    '/dashboard': {
      id: '/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof DashboardImport;
      parentRoute: typeof rootRoute;
    };
    '/how-to-play': {
      id: '/how-to-play';
      path: '/how-to-play';
      fullPath: '/how-to-play';
      preLoaderRoute: typeof HowToPlayImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/login': {
      id: '/(auth)/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof authLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/(auth)/register': {
      id: '/(auth)/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof authRegisterImport;
      parentRoute: typeof rootRoute;
    };
    '/game/$id': {
      id: '/game/$id';
      path: '/game/$id';
      fullPath: '/game/$id';
      preLoaderRoute: typeof GameIdImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/create': typeof CreateRoute;
  '/dashboard': typeof DashboardRoute;
  '/how-to-play': typeof HowToPlayRoute;
  '/login': typeof authLoginRoute;
  '/register': typeof authRegisterRoute;
  '/game/$id': typeof GameIdRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/create': typeof CreateRoute;
  '/dashboard': typeof DashboardRoute;
  '/how-to-play': typeof HowToPlayRoute;
  '/login': typeof authLoginRoute;
  '/register': typeof authRegisterRoute;
  '/game/$id': typeof GameIdRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/create': typeof CreateRoute;
  '/dashboard': typeof DashboardRoute;
  '/how-to-play': typeof HowToPlayRoute;
  '/(auth)/login': typeof authLoginRoute;
  '/(auth)/register': typeof authRegisterRoute;
  '/game/$id': typeof GameIdRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/create'
    | '/dashboard'
    | '/how-to-play'
    | '/login'
    | '/register'
    | '/game/$id';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/create'
    | '/dashboard'
    | '/how-to-play'
    | '/login'
    | '/register'
    | '/game/$id';
  id:
    | '__root__'
    | '/'
    | '/create'
    | '/dashboard'
    | '/how-to-play'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/game/$id';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  CreateRoute: typeof CreateRoute;
  DashboardRoute: typeof DashboardRoute;
  HowToPlayRoute: typeof HowToPlayRoute;
  authLoginRoute: typeof authLoginRoute;
  authRegisterRoute: typeof authRegisterRoute;
  GameIdRoute: typeof GameIdRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CreateRoute: CreateRoute,
  DashboardRoute: DashboardRoute,
  HowToPlayRoute: HowToPlayRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  GameIdRoute: GameIdRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/create",
        "/dashboard",
        "/how-to-play",
        "/(auth)/login",
        "/(auth)/register",
        "/game/$id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/create": {
      "filePath": "create.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx"
    },
    "/how-to-play": {
      "filePath": "how-to-play.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/game/$id": {
      "filePath": "game/$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
